// DERIVED FROM community.org and PeerNegotiate.org

// Capitalized words describe predicates or constants that apply to
// our OOI-wide domain models

// Lowercase words refer to predicates or constants that are specific
// to the particular situation being defined

// A leading ? identifies a variable, e.g., ?sensor

// OOI:Public means has a legitimate OOI account (and possibly nothing
// else) 

// Below we define an Org that we call AffiliationOrg; this Org lives within
// the OOI, which would itself be an Org that provides identity to its
// members and enforces sanctions such as ejection.  Hence, OOI serves
// as an institution in the sense of eBay or NCSU.

// We could include the idea of inheriting from other, more general,
// Orgs.  In that case, some roles (e.g., leader) could be inherited as
// well. 
// We could say
// Org AffiliationOrg extends ResourceOrg ...
// However, the semantics of inheritance can be tricky

// The following are primitives that we should consider deleting if we
// cannot find convincing examples or use cases for:
//  Predicate:Domain SharableResource;
  


Org AffiliationOrg Within OOI {
  // Below, *this* refers to the current instance of DataOrg

 Predicate:Domain SharableResource;
  
 Capability:Communicative Request (?Who, ?Whom, ?What);
 Capability:Normative Grant(?Who, ?Whom, ?What);

 Capability:Organizational Admit(?Who, ?Org, ?Role, ?Whom);
 Capability:Organizational Eject(?Who, ?Org, ?Role, ?Whom);

 Capability:Organizational Contribute(?owner, ?anOrg, ?aResource, ?aCapability);
 Capability:Organizational Withdraw(?owner, ?anOrg, ?aResource, ?aCapability);

 Capability:Organizational Share(?member, ?outsider, ?resource, ?capability);

 Predicate:OrgDomain RegisteredResource (?anOrg, ?aResource, ?aCapability);
 Predicate:OrgDomain Participant (?anOrg, ?aPrincipal, ?aRole);

 Predicate:Resource Owns(?Who, ?What);

 Capability:Domain Apply(?member, ?resource, ?capability);
 Capability:Domain Evaluate(?expression);

 Predicate:Resource inState(state, ?resource, ?capability);
 Predicate:Resource Supports(?resource, ?capability);

  // Contribute and Withdraw apply at the granularity of a capability; we 
  // can consider capabilities that bundle other capabilities

  //Only the owner of a resource can contribute it
  Contribute(?member, this, ?resource, ?capability) causes 
    RegisteredResource(this, ?resource, ?capability);

  //Only the owner of a resource or community can withdraw it
  Withdraw(?member, this, ?resource, ?capability) causes 
    NOT RegisteredResource(this, ?resource, ?capability);

  Role Org Singleton {
// This is the present community
    
    Power {
// If something is a legitimate OOI community, we can admit it as playing
// the role affiliateOrg
      If OOI:Community(?affiliateOrg)
      Then Admit(this, this, AffiliationOrg:affiliateOrg, ?affiliateOrg)
    }

    Power {
// If something is a legitimate OOI member, we can admit it as a member
      If OOI:Public(?member)
      Then Admit(this, this, AffiliationOrg:member, ?member)
    }

    Power {
// We can eject anyone (community or individual) from any role
      If AffiliationOrg:*(this, ?anyRole)
      Then Eject(this, this, AffiliationOrg:*, ?anyRole)
    }

    Power {
      If RegisteredResource(this, ?resource, ?capability)
      Then Withdraw(this, this, ?resource, ?capability)
    }

    Can {
      Evaluate(Participant(this, ?member, ?aRole));
    }

    Can {
      Evaluate(RegisteredResource(this, ?resource, ?capability));
    }

    Sanction {
      Sanctioner this;
      Eject(this, this, OOI:member, ?member); 
      // Additionally, Eject may put the member into OOI:NonGrata; in
      // fact, the Sanctioner should place the member into OOI:NonGrata;
      // otherwise it is not a true punishment (because Eject is a
      // Power anyway).  Doing so at the OOI level is an example of
      // escalation.
    }

  }

  Role affiliateOrg (?affiliateOrg) {
// This is the role for a community that becomes an affiliate of this
// community 

   Power {
// The community that is an affiliateOrg of this community can admit its
// members to be affiliateMembers of this community.  The idea is that
// the affiliateOrg can take selected roles and assign to them powers
// and privileges corresponding to the designated AffiliateMember role
// in this community
     If Participant(?affiliateOrg, ?otherMember, ?role)
       Then Admit(?affiliateOrg, this, AffiliateMember, ?otherMember)
  }

  Role AffiliateMember (?affiliateMember) extends GenericMember {

// Like the member role but potentially somewhat weaker

  }

  Role member (?member) extends GenericMember {

  }

  Role GenericMember (?member) {
    Qualification OOI:Public(?member);

    //member viewed as a resource owner
    Power {
      If SharableResource(?resource)
       AND Owns(?member, ?resource)
       AND Supports(?resource, ?capability)
      Then Contribute(?member, this, ?resource, ?capability)
 }

    //member viewed as a resource owner
    Power {
      If RegisteredResource(this, ?resource, ?capability)
       AND Owns(?member, ?resource)
      Then Withdraw(?member, this, ?resource, ?capability)
 }

    //member viewed as a resource owner
    Prohibition {
      If RegisteredResource(this, ?resource, ?capability)
       AND inState(acquired, ?resource, ?capability) // acquired as in OV-5
      ThenMayNot Withdraw(?member, this, ?resource, ?capability)
 }

    //member viewed as a resource user
    Authorization {
      If RegisteredResource(this, ?resource, ?capability)
       AND Owns(?owner, ?resource)
      ThenMay
         Request {
          Who ?member;
          Whom ?owner;
          What Apply(?member, ?resource, ?capability)
         }
      }

    //member viewed as a resource owner
    Power {
      If RegisteredResource(this, ?resource, ?capability)
       AND Owns(?member, ?resource)
	AND Participant(this, ?user, ?role)
	Then Authorize(?member, ?user, Apply(?role, ?resource, ?capability))
    }

    //member viewed as a resource owner
    Power {
      If RegisteredResource(this, ?resource, ?capability)
       AND Owns(?member, ?resource)
	AND Participant(this, ?user, ?role)
	AND Authorize(?member, ?user, Apply(?user, ?resource, ?capability))
      Then WithdrawAuthorization(?member, ?user, Apply(?user, ?resource, ?capability))
    }

    //member viewed as a resource user
    Prohibition {
      If NOT AffiliationOrg:member(?outsider)
       AND RegisteredResource(this, ?resource, ?capability)
      ThenMayNot Share(?member, ?outsider, ?resource, ?capability);
    }

    Commitment {
      Debtor this;
      Creditor ?member;
      Antecedent
       Request {
        Who ?member;
        Whom this;
        What Apply(?member, ?resource, ?capability)
       }
      AND inState(availableCapacity, ?resource, ?capability)

      Consequent 
       Grant {
       Who this;
       Whom ?member;
       What Authorize(?this, ?member, Apply(?member, ?resource, ?capability))
      }
    }

    Commitment {
      Debtor this;
      Creditor ?member;
      Antecedent
       Request {
        Who ?member;
        Whom this;
        What Evaluate (RegisteredResource(this, ?resource, ?capability))
      }
      Consequent 
       Inform {
        Who this;
        Whom ?member;
        What RegisteredResource(this, ?resource, ?capability)
   }
    }

    Commitment {
      Debtor this;
      Creditor ?member;
      Antecedent
       Request {
        Who ?member;
        Whom this;
        What Evaluate (Participant(this, ?m, ?anyRole))
      }
      Consequent 
       Inform {
        Who this;
        Whom ?member;
        What Participant(this, ?m, ?anyRole)
       }
    }

  }

}
