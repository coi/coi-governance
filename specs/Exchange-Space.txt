// Capitalized words describe predicates or constants that apply to
// our OOI-wide domain models

// Lowercase words refer to predicates or constants that are specific
// to the particular situation being defined

// A leading ? identifies a variable, e.g., ?sensor

// OOI:Public means has a legitimate OOI account (and possibly nothing
// else)

// Below we define an Org that we call ExchangeSpaceOrg; this Org lives within
// the OOI, which would itself be an Org that provides identity to its
// members and enforces sanctions such as ejection.  Hence, OOI serves
// as an institution in the sense of eBay or NCSU.

// We could include the idea of inheriting from other, more general,
// Orgs.  In that case, some roles (e.g., leader) could be inherited as
// well.
// We could say
// Org ExchangeSpaceOrg extends ResourceOrg ...
// However, the semantics of inheritance can be tricky

// The following are primitives that we should consider deleting if we
// cannot find convincing examples or use cases for:
//  Predicate:Domain SharableResource;

////////////////////////////////////////////////////////////////////////
// The following are the signatures of the various predicates that we
// use.  These are introduced in the governance models (see
// governance-models.vsd).  
// They should not be in this specification, but are left here for
// convenience:

 Capability:Communicative C_Request (?Who, ?Whom, ?What);
 Capability:Normative N_Grant(?Who, ?Whom, ?What);
 Capability:Normative N_Revoke(?Who, ?fromWhom, ?What);

 Capability:Participation P_Admit(?Who, ?Org, ?Role, ?Whom);
 Capability:Participation P_Eject(?Who, ?Org, ?Role, ?Whom);

 Capability:Resource R_Contribute(?owner, ?anOrg, ?aResource, ?aCapability);
 Capability:Resource R_Withdraw(?owner, ?anOrg, ?aResource, ?aCapability);

  // A S_Member is any principal playing any role in an Org
 Predicate:Participation S_Member(?anOrg, ?aPrincipal, ?aRole);

  // A S_Registrand (note that the last letter is "d") is a resource
  // that has been contributed (and not yet withdrawn) to an org; the
  // contributor is the "registrant" 
 Predicate:Participation S_Registrand (?anOrg, ?aRegistrant, ?aResource, ?aCapability);

  // S_Owns simply reflects the idea that a principal owns a resource.
  // In some cases, we could instead apply an alternative relationship
  // such as "controls" or "represents" but then we would need to
  // describe how such an alternative relationship arises.  Mostly, it
  // would be rooted in the owner transferring its powers to another
  // principal (in the sense of a power of attorney).  In some cases,
  // it could involve stewardship of a resource wherein the owner of a
  // resource may be divested of all authority over it, and such
  // authority invested in another party.
 Predicate:Participation S_Owns(?Who, ?What);

 Capability:Domain D_Apply(?member, ?resource, ?capability);
 Capability:Domain D_Evaluate(?expression);

 Predicate:Resource S_inState(state, ?resource, ?capability);
 Predicate:Resource S_Supports(?resource, ?capability);

 // R_Contribute and R_Withdraw apply at the granularity of a
 // capability; we can consider capabilities that bundle other
 // capabilities.

 R_Contribute(?member, thisOrg, ?resource, ?capability) causes
   S_Registrand(thisOrg, ?member, ?resource, ?capability);

 R_Withdraw(?member, thisOrg, ?resource, ?capability) causes
   NOT S_Registrand(thisOrg, ?member, ?resource, ?capability);

// This concludes the generic part and should be removed from this
// specification. 
////////////////////////////////////////////////////////////////////////


Org ExchangeSpaceOrg Within OOI {
 // Below, *thisOrg* refers to the current instance of ExchangeSpaceOrg

///////////////////////////////////////////////////////////////////////////
 Role Org Singleton {
// This is the present exchange space
// The constant *thisOrg* refers to this Singleton throughout this
// specification 

   Power {
// If something is a legitimate OOI entity, we can admit it as playing
// the role User or the role Provider
     If OOI:Public(?entity)
     Then P_Admit(thisOrg, thisOrg, ExchangeSpaceOrg:*, ?entity)
   }

   Power {
// We can eject any entity from any role
     If ExchangeSpaceOrg:*(thisOrg, ?anyRole)
     Then P_Eject(thisOrg, thisOrg, ExchangeSpaceOrg:*, ?anyRole)
   }

   Can {
     D_Evaluate(S_Member(thisOrg, ?member, ?aRole));
   }

   Can {
     D_Evaluate(S_Registrand(thisOrg, ?registrant, ?resource, ?capability));
   }

 }

//////////////////////////////////////////////////////////////////////
 Role GenericMember (?member) {
   Qualification OOI:Public(?member);

// The following powers are largely common to all principals, since
// they reflect their autonomy, and provide them an ability to
// negotiate with each other

   Power {
     N_Propose(?who, ?whom, ?terms, ?capability);
   }

   Power {
     If N_Propose(?who, ?whom, ?terms, ?capability);
     N_Accept(?who, ?whom, ?terms, ?capability);
   }

   Power {
     If N_Propose(?who, ?whom, ?terms, ?capability);
     N_Reject(?who, ?whom, ?terms, ?capability);
   }

 }

////////////////////////////////////////////////////////////////////////
 Role User (?user) extends GenericMember {
// This is the role for any entity that becomes a "user client" of this
// exchange space

   Power {
     If S_Registrand(thisOrg, ?registrant, ?resource, ?capability)
     Then
        C_Request {
         Who ?user;
         Whom ?registrant;
         What D_Apply(?user, ?resource, ?capability)
        }
     }

   Commitment {
     Debtor thisOrg;
     Creditor ?user;
     Antecedent
      C_Request {
       Who ?user;
       Whom thisOrg;
       What D_Evaluate (S_Registrand(thisOrg, ?registrant, ?resource, ?capability))
     }
     Consequent
      Inform {
       Who thisOrg;
       Whom ?user;
       What S_Registrand(thisOrg, ?registrant, ?resource, ?capability)
  }
   }

   Commitment {
     Debtor thisOrg;
     Creditor ?user;
     Antecedent
      C_Request {
       Who ?user;
       Whom thisOrg;
       What D_Evaluate (S_Member(thisOrg, ?m, ?anyRole))
     }
     Consequent
      Inform {
       Who thisOrg;
       Whom ?user;
       What S_Member(thisOrg, ?m, ?anyRole)
      }
   }

}

////////////////////////////////////////////////////////////////////////
 Role Provider (?provider) extends GenericMember {
// This is the role for any entity that becomes an exchange point in this
// exchange space

   Power {
     If S_Owns(?provider, ?resource)
      AND S_Supports(?resource, ?capability)
     Then R_Contribute(?provider, thisOrg, ?resource, ?capability)
    }

// If you registered a resource, you can withdraw it
   Power { 
     If S_Registrand(thisOrg, ?provider, ?resource, ?capability)
     Then R_Withdraw(?provider, thisOrg, ?resource, ?capability)
    }

// If your resource is in use by others, you can't withdraw it
   Prohibition {
     If S_Registrand(thisOrg, ?provider, ?resource, ?capability)
      AND S_inState(acquired, ?resource, ?capability) // acquired as in OV-5
     ThenMayNot R_Withdraw(?provider, thisOrg, ?resource, ?capability)
 }

// The following is not a power but could be a qualification or we can
// perhaps omit it

 Power {
     If S_Registrand(thisOrg, ?provider, ?resource, ?capability)
       AND S_Member(thisOrg, ?user, ?role)
       Then N_Grant(Authorization(?provider, ?user, D_Apply(?role, ?resource, ?capability)))
   }

   Power {
     If S_Registrand(thisOrg, ?provider, ?resource, ?capability)
       AND S_Member(thisOrg, ?user, ?role)
       AND Authorization(?provider, ?user, D_Apply(?user, ?resource, ?capability))
     Then N_Revoke(Authorization(?provider, ?user, D_Apply(?user, ?resource, ?capability)))
   }


}

}
